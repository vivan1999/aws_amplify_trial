{"ast":null,"code":"import { T as TypedEvent } from './typed-event-a230184a.js';\nclass ThemeSwitcher {\n  get themeChanged() {\n    return this._themeChanged;\n  }\n  hasVariantSuffix(className) {\n    return className.endsWith(this.suffixDark) || className.endsWith(this.suffixLight);\n  }\n  isThemeClass(className) {\n    return className.startsWith(this.prefixTheme) && this.hasVariantSuffix(className);\n  }\n  setTheme(themeName, systemAppearance = false) {\n    if (!this.isThemeClass(themeName) && systemAppearance === false) {\n      throw Error(`Provided theme name ${themeName} does not match our naming conventions. (theme-<name>-(dark,light))`);\n    }\n    if (systemAppearance) {\n      const currentSystemAppearance = getCurrentSystemAppearance();\n      this.replaceBodyThemeClass(themeName);\n      this.setVariant(currentSystemAppearance);\n      return;\n    }\n    this.replaceBodyThemeClass(themeName);\n  }\n  replaceBodyThemeClass(themeName) {\n    const oldThemes = [];\n    document.body.classList.forEach(className => {\n      if (this.isThemeClass(className)) {\n        oldThemes.push(className);\n      }\n    });\n    document.body.classList.remove(...oldThemes);\n    document.body.classList.add(themeName);\n  }\n  toggleMode() {\n    const oldThemes = [];\n    document.body.classList.forEach(className => {\n      if (this.isThemeClass(className)) {\n        oldThemes.push(className);\n      }\n    });\n    if (oldThemes.length === 0) {\n      document.body.classList.add(this.getOppositeMode(this.defaultTheme));\n      return;\n    }\n    oldThemes.forEach(themeName => {\n      document.body.classList.replace(themeName, this.getOppositeMode(themeName));\n    });\n  }\n  getCurrentTheme() {\n    var _a;\n    return (_a = Array.from(document.body.classList).find(className => this.isThemeClass(className))) !== null && _a !== void 0 ? _a : `theme-${window.getComputedStyle(document.body).getPropertyValue('--ix-theme-name')}`;\n  }\n  setVariant(variant = getCurrentSystemAppearance()) {\n    const currentTheme = this.getCurrentTheme();\n    document.body.classList.remove(currentTheme);\n    if (currentTheme.endsWith(this.suffixDark)) {\n      document.body.classList.add(currentTheme.replace(/-dark$/g, `-${variant}`));\n    }\n    if (currentTheme.endsWith(this.suffixLight)) {\n      document.body.classList.add(currentTheme.replace(/-light$/g, `-${variant}`));\n    }\n  }\n  getOppositeMode(themeName) {\n    if (themeName.endsWith(this.suffixDark)) {\n      return themeName.replace(/-dark$/g, this.suffixLight);\n    }\n    if (themeName.endsWith(this.suffixLight)) {\n      return themeName.replace(/-light$/g, this.suffixDark);\n    }\n  }\n  handleMutations(mutations) {\n    return mutations.forEach(mutation => {\n      const {\n        target\n      } = mutation;\n      target.classList.forEach(className => {\n        var _a;\n        if (this.isThemeClass(className) && !((_a = mutation.oldValue) === null || _a === void 0 ? void 0 : _a.includes(className))) {\n          this._themeChanged.emit(className);\n        }\n      });\n    });\n  }\n  registerMutationObserver() {\n    if (typeof window === 'undefined') {\n      return;\n    }\n    if (!('MutationObserver' in window)) {\n      console.warn('ThemeSwitcher not supported by your browser. Missing MutationObserver API');\n      return;\n    }\n    this.mutationObserver = new MutationObserver(mutations => {\n      this.handleMutations(mutations);\n    });\n    this.mutationObserver.observe(document.body, {\n      attributeFilter: ['class'],\n      attributeOldValue: true\n    });\n  }\n  constructor() {\n    this.prefixTheme = 'theme-';\n    this.suffixLight = '-light';\n    this.suffixDark = '-dark';\n    this.defaultTheme = 'theme-classic-dark';\n    this._themeChanged = new TypedEvent();\n    this.registerMutationObserver();\n  }\n}\nconst getCurrentSystemAppearance = () => {\n  const matchMedia = window.matchMedia('(prefers-color-scheme: dark)');\n  if (matchMedia.matches) {\n    return 'dark';\n  }\n  return 'light';\n};\nconst themeSwitcher = new ThemeSwitcher();\nexport { getCurrentSystemAppearance as g, themeSwitcher as t };","map":{"version":3,"names":["ThemeSwitcher","themeChanged","_themeChanged","hasVariantSuffix","className","endsWith","suffixDark","suffixLight","isThemeClass","startsWith","prefixTheme","setTheme","themeName","systemAppearance","Error","currentSystemAppearance","getCurrentSystemAppearance","replaceBodyThemeClass","setVariant","oldThemes","document","body","classList","forEach","push","remove","add","toggleMode","length","getOppositeMode","defaultTheme","replace","getCurrentTheme","_a","Array","from","find","window","getComputedStyle","getPropertyValue","variant","currentTheme","handleMutations","mutations","mutation","target","oldValue","includes","emit","registerMutationObserver","console","warn","mutationObserver","MutationObserver","observe","attributeFilter","attributeOldValue","constructor","TypedEvent","matchMedia","matches","themeSwitcher"],"sources":["D:\\pci_project_new\\node_modules\\@siemens\\ix\\dist\\esm\\src\\components\\utils\\theme-switcher.ts"],"sourcesContent":["import { TypedEvent } from './typed-event';\n\nexport type ThemeVariant = 'light' | 'dark';\n\nclass ThemeSwitcher {\n  readonly prefixTheme = 'theme-';\n  readonly suffixLight = '-light';\n  readonly suffixDark = '-dark';\n  readonly defaultTheme = 'theme-classic-dark';\n\n  mutationObserver: MutationObserver;\n  _themeChanged = new TypedEvent<string>();\n\n  public get themeChanged() {\n    return this._themeChanged;\n  }\n\n  public hasVariantSuffix(className: string) {\n    return (\n      className.endsWith(this.suffixDark) ||\n      className.endsWith(this.suffixLight)\n    );\n  }\n\n  private isThemeClass(className: string) {\n    return (\n      className.startsWith(this.prefixTheme) && this.hasVariantSuffix(className)\n    );\n  }\n\n  public setTheme(themeName: string, systemAppearance = false) {\n    if (!this.isThemeClass(themeName) && systemAppearance === false) {\n      throw Error(\n        `Provided theme name ${themeName} does not match our naming conventions. (theme-<name>-(dark,light))`\n      );\n    }\n\n    if (systemAppearance) {\n      const currentSystemAppearance = getCurrentSystemAppearance();\n      this.replaceBodyThemeClass(themeName);\n      this.setVariant(currentSystemAppearance);\n      return;\n    }\n\n    this.replaceBodyThemeClass(themeName);\n  }\n\n  private replaceBodyThemeClass(themeName: string) {\n    const oldThemes: string[] = [];\n    document.body.classList.forEach((className) => {\n      if (this.isThemeClass(className)) {\n        oldThemes.push(className);\n      }\n    });\n\n    document.body.classList.remove(...oldThemes);\n    document.body.classList.add(themeName);\n  }\n\n  public toggleMode() {\n    const oldThemes: string[] = [];\n\n    document.body.classList.forEach((className) => {\n      if (this.isThemeClass(className)) {\n        oldThemes.push(className);\n      }\n    });\n\n    if (oldThemes.length === 0) {\n      document.body.classList.add(this.getOppositeMode(this.defaultTheme));\n      return;\n    }\n\n    oldThemes.forEach((themeName) => {\n      document.body.classList.replace(\n        themeName,\n        this.getOppositeMode(themeName)\n      );\n    });\n  }\n\n  public getCurrentTheme() {\n    return (\n      Array.from(document.body.classList).find((className) =>\n        this.isThemeClass(className)\n      ) ??\n      `theme-${window\n        .getComputedStyle(document.body)\n        .getPropertyValue('--ix-theme-name')}`\n    );\n  }\n\n  public setVariant(variant: ThemeVariant = getCurrentSystemAppearance()) {\n    const currentTheme = this.getCurrentTheme();\n    document.body.classList.remove(currentTheme);\n\n    if (currentTheme.endsWith(this.suffixDark)) {\n      document.body.classList.add(\n        currentTheme.replace(/-dark$/g, `-${variant}`)\n      );\n    }\n\n    if (currentTheme.endsWith(this.suffixLight)) {\n      document.body.classList.add(\n        currentTheme.replace(/-light$/g, `-${variant}`)\n      );\n    }\n  }\n\n  private getOppositeMode(themeName: string) {\n    if (themeName.endsWith(this.suffixDark)) {\n      return themeName.replace(/-dark$/g, this.suffixLight);\n    }\n\n    if (themeName.endsWith(this.suffixLight)) {\n      return themeName.replace(/-light$/g, this.suffixDark);\n    }\n  }\n\n  private handleMutations(mutations: MutationRecord[]) {\n    return mutations.forEach((mutation) => {\n      const { target } = mutation;\n      (target as HTMLElement).classList.forEach((className) => {\n        if (\n          this.isThemeClass(className) &&\n          !mutation.oldValue?.includes(className)\n        ) {\n          this._themeChanged.emit(className);\n        }\n      });\n    });\n  }\n\n  private registerMutationObserver() {\n    if (typeof (window as any) === 'undefined') {\n      return;\n    }\n\n    if (!('MutationObserver' in window)) {\n      console.warn(\n        'ThemeSwitcher not supported by your browser. Missing MutationObserver API'\n      );\n      return;\n    }\n\n    this.mutationObserver = new MutationObserver((mutations) => {\n      this.handleMutations(mutations);\n    });\n\n    this.mutationObserver.observe(document.body, {\n      attributeFilter: ['class'],\n      attributeOldValue: true,\n    });\n  }\n\n  public constructor() {\n    this.registerMutationObserver();\n  }\n}\n\nexport type IxTheme =\n  | 'classic'\n  | 'classic-dark'\n  | 'classic-light'\n  | (string & {});\n\nexport const getCurrentSystemAppearance = (): ThemeVariant => {\n  const matchMedia = window.matchMedia('(prefers-color-scheme: dark)');\n\n  if (matchMedia.matches) {\n    return 'dark';\n  }\n\n  return 'light';\n};\n\nexport const themeSwitcher = new ThemeSwitcher();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}