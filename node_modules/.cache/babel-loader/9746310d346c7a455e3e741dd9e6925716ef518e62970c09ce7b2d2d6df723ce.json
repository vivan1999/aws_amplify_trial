{"ast":null,"code":"const min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = v => ({\n  x: v,\n  y: v\n});\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction getSideAxis(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition$1 = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? min$1 - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset + alignmentOffset\n      }\n    };\n  }\n});\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\nfunction getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  // Browsers without `ShadowRoot` support.\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);\n}\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].includes(getNodeName(element));\n}\nfunction isContainingBlock(element) {\n  const webkit = isWebKit();\n  const css = getComputedStyle(element);\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else {\n      currentNode = getParentNode(currentNode);\n    }\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nfunction isLastTraversableNode(node) {\n  return ['html', 'body', '#document'].includes(getNodeName(node));\n}\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.pageXOffset,\n    scrollTop: element.pageYOffset\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));\n}\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentIFrame = win.frameElement;\n    while (currentIFrame && offsetParent && offsetWin !== win) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentIFrame = getWindow(currentIFrame).frameElement;\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  if (offsetParent === documentElement) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n  };\n}\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      ...clippingAncestor,\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\nfunction getDimensions(element) {\n  return getCssDimensions(element);\n}\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  return element.offsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const window = getWindow(element);\n  if (!isHTMLElement(element)) {\n    return window;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {\n    return window;\n  }\n  return offsetParent || getContainingBlock(element) || window;\n}\nconst getElementRects = async function (_ref) {\n  let {\n    reference,\n    floating,\n    strategy\n  } = _ref;\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  return {\n    reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      ...(await getDimensionsFn(floating))\n    }\n  };\n};\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    clearTimeout(timeoutId);\n    io && io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = element.getBoundingClientRect();\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 100);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          resizeObserver && resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo && cleanupIo();\n    resizeObserver && resizeObserver.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain CSS positioning\n * strategy.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\nexport { autoUpdate as a, arrow as b, computePosition as c, flip as f, inline as i, offset as o, shift as s };","map":{"version":3,"names":["min","Math","max","round","floor","createCoords","v","x","y","oppositeSideMap","left","right","bottom","top","oppositeAlignmentMap","start","end","clamp","value","evaluate","param","getSide","placement","split","getAlignment","getOppositeAxis","axis","getAxisLength","getSideAxis","includes","getAlignmentAxis","getAlignmentSides","rects","rtl","alignment","alignmentAxis","length","mainAlignmentSide","reference","floating","getOppositePlacement","getExpandedPlacements","oppositePlacement","getOppositeAlignmentPlacement","replace","getSideList","side","isStart","lr","rl","tb","bt","getOppositeAxisPlacements","flipAlignment","direction","list","map","concat","expandPaddingObject","padding","getPaddingObject","rectToClientRect","rect","width","height","computeCoordsFromPlacement","_ref","sideAxis","alignLength","isVertical","commonX","commonY","commonAlign","coords","computePosition$1","computePosition","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","getElementRects","statefulPlacement","middlewareData","resetCount","i","name","fn","nextX","nextY","data","reset","initialPlacement","elements","detectOverflow","state","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","paddingObject","altContext","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","arrow","arrowDimensions","getDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","largestPossiblePadding","minPadding","maxPadding","min$1","center","offset","shouldAddOffset","alignmentOffset","centerOffset","flip","_middlewareData$flip","mainAxis","checkMainAxis","crossAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","detectOverflowOptions","isBasePlacement","push","placements","overflow","overflows","overflowsData","sides","every","_middlewareData$flip2","_overflowsData$filter","nextIndex","index","nextPlacement","resetPlacement","d","sort","a","b","_overflowsData$map$so","reduce","acc","getBoundingRect","minX","minY","maxX","maxY","getRectsByLine","sortedRects","slice","groups","prevRect","inline","nativeClientRects","Array","from","getClientRects","clientRects","fallback","getBoundingClientRect","find","firstRect","lastRect","isTop","isLeftSide","maxRight","minLeft","measureRects","resetRects","convertValueToCoords","mainAxisMulti","crossAxisMulti","rawValue","diffCoords","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","getNodeName","node","isNode","nodeName","toLowerCase","getWindow","_node$ownerDocument","ownerDocument","defaultView","window","document","documentElement","Node","Element","isHTMLElement","HTMLElement","isShadowRoot","ShadowRoot","isOverflowElement","overflowX","overflowY","display","getComputedStyle","test","isTableElement","isContainingBlock","webkit","isWebKit","css","transform","perspective","containerType","backdropFilter","some","willChange","contain","getContainingBlock","currentNode","getParentNode","isLastTraversableNode","CSS","supports","getNodeScroll","scrollLeft","scrollTop","pageXOffset","pageYOffset","result","assignedSlot","parentNode","host","getNearestOverflowAncestor","body","getOverflowAncestors","_node$ownerDocument2","scrollableAncestor","isBody","win","visualViewport","getCssDimensions","parseFloat","hasOffset","offsetWidth","offsetHeight","shouldFallback","$","unwrapElement","domElement","Number","isFinite","noOffsets","getVisualOffsets","offsetLeft","offsetTop","shouldAddVisualOffsets","isFixed","floatingOffsetParent","includeScale","isFixedStrategy","clientRect","scale","visualOffsets","offsetWin","currentIFrame","frameElement","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","isOffsetParentAnElement","scroll","offsets","offsetRect","getWindowScrollBarX","getDocumentRect","html","scrollWidth","clientWidth","scrollHeight","clientHeight","getViewportRect","visualViewportBased","getInnerBoundingClientRect","getClientRectFromClippingAncestor","clippingAncestor","hasFixedPositionAncestor","stopNode","position","getClippingElementAncestors","cache","cachedResult","get","el","currentContainingBlockComputedStyle","elementIsFixed","computedStyle","currentNodeIsContaining","shouldDropCurrentNode","ancestor","set","elementClippingAncestors","_c","clippingAncestors","firstClippingAncestor","clippingRect","accRect","getRectRelativeToOffsetParent","getTrueOffsetParent","polyfill","getOffsetParentFn","getDimensionsFn","observeMove","onMove","io","timeoutId","root","cleanup","clearTimeout","disconnect","refresh","skip","threshold","insetTop","insetRight","insetBottom","insetLeft","rootMargin","isFirstUpdate","handleObserve","entries","ratio","intersectionRatio","setTimeout","IntersectionObserver","e","observe","autoUpdate","update","ancestorScroll","ancestorResize","elementResize","ResizeObserver","layoutShift","animationFrame","referenceEl","ancestors","forEach","addEventListener","passive","cleanupIo","reobserveFrame","resizeObserver","firstEntry","target","unobserve","cancelAnimationFrame","requestAnimationFrame","frameId","prevRefRect","frameLoop","nextRefRect","removeEventListener","Map","mergedOptions","platformWithCache"],"sources":["D:\\pci_project_new\\node_modules\\@siemens\\node_modules\\@floating-ui\\utils\\dist\\floating-ui.utils.esm.js","D:\\pci_project_new\\node_modules\\@siemens\\node_modules\\@floating-ui\\core\\dist\\floating-ui.core.esm.js","D:\\pci_project_new\\node_modules\\@siemens\\node_modules\\@floating-ui\\utils\\dom\\dist\\floating-ui.utils.dom.esm.js","D:\\pci_project_new\\node_modules\\@siemens\\node_modules\\@floating-ui\\dom\\dist\\floating-ui.dom.esm.js"],"sourcesContent":["const sides = ['top', 'right', 'bottom', 'left'];\nconst alignments = ['start', 'end'];\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = v => ({\n  x: v,\n  y: v\n});\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction getSideAxis(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\nexport { alignments, clamp, createCoords, evaluate, expandPaddingObject, floor, getAlignment, getAlignmentAxis, getAlignmentSides, getAxisLength, getExpandedPlacements, getOppositeAlignmentPlacement, getOppositeAxis, getOppositeAxisPlacements, getOppositePlacement, getPaddingObject, getSide, getSideAxis, max, min, placements, rectToClientRect, round, sides };\n","import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? min$1 - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset + alignmentOffset\n      }\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isYAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n","function getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  // Browsers without `ShadowRoot` support.\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);\n}\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].includes(getNodeName(element));\n}\nfunction isContainingBlock(element) {\n  const webkit = isWebKit();\n  const css = getComputedStyle(element);\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else {\n      currentNode = getParentNode(currentNode);\n    }\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nfunction isLastTraversableNode(node) {\n  return ['html', 'body', '#document'].includes(getNodeName(node));\n}\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.pageXOffset,\n    scrollTop: element.pageYOffset\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));\n}\n\nexport { getComputedStyle, getContainingBlock, getDocumentElement, getNearestOverflowAncestor, getNodeName, getNodeScroll, getOverflowAncestors, getParentNode, getWindow, isContainingBlock, isElement, isHTMLElement, isLastTraversableNode, isNode, isOverflowElement, isShadowRoot, isTableElement, isWebKit };\n","import { rectToClientRect, computePosition as computePosition$1 } from '@floating-ui/core';\nexport { arrow, autoPlacement, detectOverflow, flip, hide, inline, limitShift, offset, shift, size } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle, isHTMLElement, isElement, getWindow, isWebKit, getDocumentElement, getNodeName, isOverflowElement, getNodeScroll, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentIFrame = win.frameElement;\n    while (currentIFrame && offsetParent && offsetWin !== win) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentIFrame = getWindow(currentIFrame).frameElement;\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  if (offsetParent === documentElement) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      ...clippingAncestor,\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  return getCssDimensions(element);\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  return element.offsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const window = getWindow(element);\n  if (!isHTMLElement(element)) {\n    return window;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {\n    return window;\n  }\n  return offsetParent || getContainingBlock(element) || window;\n}\n\nconst getElementRects = async function (_ref) {\n  let {\n    reference,\n    floating,\n    strategy\n  } = _ref;\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  return {\n    reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      ...(await getDimensionsFn(floating))\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    clearTimeout(timeoutId);\n    io && io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = element.getBoundingClientRect();\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 100);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          resizeObserver && resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo && cleanupIo();\n    resizeObserver && resizeObserver.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain CSS positioning\n * strategy.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { autoUpdate, computePosition, platform };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}