{"ast":null,"code":"import { proxyCustomElement, HTMLElement, forceUpdate, h, Host } from '@stencil/core/internal/client';\nimport { m as matchBreakpoint } from './breakpoints.js';\nconst colCss = \":host{position:relative;flex-basis:0;flex-grow:1;width:100%;max-width:100%;min-height:1px;padding:calc(var(--ix-layout-grid-gutter) * 0.5)}:host *,:host *::after,:host *::before{box-sizing:border-box}:host ::-webkit-scrollbar-button{display:none}:host ::-webkit-scrollbar{width:0.5rem;height:0.5rem}:host ::-webkit-scrollbar-track{border-radius:5px;background:var(--theme-scrollbar-track--background)}:host ::-webkit-scrollbar-track:hover{background:var(--theme-scrollbar-track--background--hover)}:host ::-webkit-scrollbar-thumb{border-radius:5px;background:var(--theme-scrollbar-thumb--background)}:host ::-webkit-scrollbar-thumb:hover{background:var(--theme-scrollbar-thumb--background--hover)}:host ::-webkit-scrollbar-corner{display:none}\";\nconst Col = /*@__PURE__*/proxyCustomElement(class Col extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.size = undefined;\n    this.sizeSm = undefined;\n    this.sizeMd = undefined;\n    this.sizeLg = undefined;\n  }\n  onResize() {\n    forceUpdate(this);\n  }\n  getSize(breakpoint) {\n    if (breakpoint === '') {\n      return this.size;\n    }\n    if (breakpoint === 'sm') {\n      return this.sizeSm;\n    }\n    if (breakpoint === 'md') {\n      return this.sizeMd;\n    }\n    if (breakpoint === 'lg') {\n      return this.sizeLg;\n    }\n  }\n  getColumnSize() {\n    let size;\n    Col.Breakpoints.forEach(breakpoint => {\n      const isMediaQueryActive = breakpoint !== '' ? matchBreakpoint(breakpoint) : true;\n      if (!isMediaQueryActive) {\n        return;\n      }\n      const currentSize = this.getSize(breakpoint);\n      if (currentSize) {\n        size = currentSize;\n      }\n    });\n    return size;\n  }\n  getColumnSizeStyling() {\n    const size = this.getColumnSize();\n    if (!size) {\n      return;\n    }\n    if (size === 'auto') {\n      return {\n        flex: '0 0 auto',\n        width: 'auto',\n        'max-width': 'auto'\n      };\n    }\n    const colSize = `calc(calc(${size} / var(--ix-layout-grid-columns)) * 100%)`;\n    return {\n      flex: `0 0 ${colSize}`,\n      width: `${colSize}`,\n      'max-width': `${colSize}`\n    };\n  }\n  render() {\n    return h(Host, {\n      style: Object.assign({}, this.getColumnSizeStyling())\n    }, h(\"slot\", null));\n  }\n  static get style() {\n    return colCss;\n  }\n}, [1, \"ix-col\", {\n  \"size\": [1],\n  \"sizeSm\": [1, \"size-sm\"],\n  \"sizeMd\": [1, \"size-md\"],\n  \"sizeLg\": [1, \"size-lg\"]\n}, [[9, \"resize\", \"onResize\"]]]);\nCol.Breakpoints = ['', 'sm', 'md', 'lg'];\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ix-col\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ix-col\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Col);\n        }\n        break;\n    }\n  });\n}\nconst IxCol = Col;\nconst defineCustomElement = defineCustomElement$1;\nexport { IxCol, defineCustomElement };","map":{"version":3,"names":["colCss","Col","proxyCustomElement","HTMLElement","onResize","forceUpdate","getSize","breakpoint","size","sizeSm","sizeMd","sizeLg","getColumnSize","Breakpoints","forEach","isMediaQueryActive","matchBreakpoint","currentSize","getColumnSizeStyling","flex","width","colSize","render","h","Host","style","Object","assign"],"sources":["D:\\pci_project_new\\node_modules\\@siemens\\ix\\components\\src\\components\\col\\col.scss?tag=ix-col&encapsulation=shadow","D:\\pci_project_new\\node_modules\\@siemens\\ix\\components\\src\\components\\col\\col.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n@import 'mixins/shadow-dom/component';\n\n:host {\n  @include ix-component;\n  position: relative;\n  flex-basis: 0;\n  flex-grow: 1;\n  width: 100%;\n  max-width: 100%;\n  min-height: 1px;\n\n  padding: calc(var(--ix-layout-grid-gutter) * 0.5);\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Component, forceUpdate, h, Host, Listen, Prop } from '@stencil/core';\nimport { Breakpoint, matchBreakpoint } from '../utils/breakpoints';\n\ntype GridBreakpoint = Breakpoint | '';\n\nexport type ColumnSize =\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | '10'\n  | '11'\n  | '12'\n  | 'auto';\n\n/**\n * @since 2.0.0\n */\n@Component({\n  tag: 'ix-col',\n  styleUrl: 'col.scss',\n  shadow: true,\n})\nexport class Col {\n  static Breakpoints: GridBreakpoint[] = ['', 'sm', 'md', 'lg'];\n\n  /**\n   * Size of the column\n   */\n  @Prop() size?: ColumnSize;\n\n  /**\n   * Size of the column for sm screens\n   */\n  @Prop() sizeSm?: ColumnSize;\n\n  /**\n   * Size of the column for md screens\n   */\n  @Prop() sizeMd?: ColumnSize;\n\n  /**\n   * Size of the column for lg screens\n   */\n  @Prop() sizeLg?: ColumnSize;\n\n  @Listen('resize', { target: 'window' })\n  onResize() {\n    forceUpdate(this);\n  }\n\n  private getSize(breakpoint: GridBreakpoint) {\n    if (breakpoint === '') {\n      return this.size;\n    }\n\n    if (breakpoint === 'sm') {\n      return this.sizeSm;\n    }\n\n    if (breakpoint === 'md') {\n      return this.sizeMd;\n    }\n\n    if (breakpoint === 'lg') {\n      return this.sizeLg;\n    }\n  }\n\n  private getColumnSize() {\n    let size: ColumnSize;\n    Col.Breakpoints.forEach((breakpoint) => {\n      const isMediaQueryActive =\n        breakpoint !== '' ? matchBreakpoint(breakpoint) : true;\n\n      if (!isMediaQueryActive) {\n        return;\n      }\n\n      const currentSize = this.getSize(breakpoint);\n\n      if (currentSize) {\n        size = currentSize;\n      }\n    });\n\n    return size;\n  }\n\n  private getColumnSizeStyling() {\n    const size = this.getColumnSize();\n\n    if (!size) {\n      return;\n    }\n\n    if (size === 'auto') {\n      return {\n        flex: '0 0 auto',\n        width: 'auto',\n        'max-width': 'auto',\n      };\n    }\n\n    const colSize = `calc(calc(${size} / var(--ix-layout-grid-columns)) * 100%)`;\n\n    return {\n      flex: `0 0 ${colSize}`,\n      width: `${colSize}`,\n      'max-width': `${colSize}`,\n    };\n  }\n\n  render() {\n    return (\n      <Host\n        style={{\n          ...this.getColumnSizeStyling(),\n        }}\n      >\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"],"mappings":";;AAAA,MAAMA,MAAM,GAAG,yuBAAyuB;MCqC3uBC,GAAG,gBAAAC,kBAAA,OAAAD,GAAA,SAAAE,WAAA;;;;;;;;;;EAwBdC,QAAQA,CAAA;IACNC,WAAW,CAAC,IAAI,CAAC;;EAGXC,OAAOA,CAACC,UAA0B;IACxC,IAAIA,UAAU,KAAK,EAAE,EAAE;MACrB,OAAO,IAAI,CAACC,IAAI;;IAGlB,IAAID,UAAU,KAAK,IAAI,EAAE;MACvB,OAAO,IAAI,CAACE,MAAM;;IAGpB,IAAIF,UAAU,KAAK,IAAI,EAAE;MACvB,OAAO,IAAI,CAACG,MAAM;;IAGpB,IAAIH,UAAU,KAAK,IAAI,EAAE;MACvB,OAAO,IAAI,CAACI,MAAM;;;EAIdC,aAAaA,CAAA;IACnB,IAAIJ,IAAgB;IACpBP,GAAG,CAACY,WAAW,CAACC,OAAO,CAAEP,UAAU;MACjC,MAAMQ,kBAAkB,GACtBR,UAAU,KAAK,EAAE,GAAGS,eAAe,CAACT,UAAU,CAAC,GAAG,IAAI;MAExD,IAAI,CAACQ,kBAAkB,EAAE;QACvB;;MAGF,MAAME,WAAW,GAAG,IAAI,CAACX,OAAO,CAACC,UAAU,CAAC;MAE5C,IAAIU,WAAW,EAAE;QACfT,IAAI,GAAGS,WAAW;;KAErB,CAAC;IAEF,OAAOT,IAAI;;EAGLU,oBAAoBA,CAAA;IAC1B,MAAMV,IAAI,GAAG,IAAI,CAACI,aAAa,EAAE;IAEjC,IAAI,CAACJ,IAAI,EAAE;MACT;;IAGF,IAAIA,IAAI,KAAK,MAAM,EAAE;MACnB,OAAO;QACLW,IAAI,EAAE,UAAU;QAChBC,KAAK,EAAE,MAAM;QACb,WAAW,EAAE;OACd;;IAGH,MAAMC,OAAO,GAAG,aAAab,IAAI,2CAA2C;IAE5E,OAAO;MACLW,IAAI,EAAE,OAAOE,OAAO,EAAE;MACtBD,KAAK,EAAE,GAAGC,OAAO,EAAE;MACnB,WAAW,EAAE,GAAGA,OAAO;KACxB;;EAGHC,MAAMA,CAAA;IACJ,OACEC,CAAA,CAACC,IAAI;MACHC,KAAK,EAAAC,MAAA,CAAAC,MAAA,KACA,IAAI,CAACT,oBAAoB,EAAE;IAAA,GAGhCK,CAAA,cAAa,CACR;;;;;;;;;;;AAjGJtB,GAAA,CAAAY,WAAW,GAAqB,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}