{"ast":null,"code":"/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst convertToRemString = value => {\n  const valueRem = value / 16;\n  return `${valueRem}rem`;\n};\nconst convertToAbbreviationString = num => {\n  if (isNaN(num) || num === null || num === undefined) {\n    return '';\n  }\n  let unit = '';\n  // Metric Units\n  const units = [{\n    unit: 'q',\n    value: Math.pow(10, 15)\n  }, {\n    unit: 't',\n    value: Math.pow(10, 12)\n  }, {\n    unit: 'B',\n    value: Math.pow(10, 9)\n  }, {\n    unit: 'M',\n    value: Math.pow(10, 6)\n  }, {\n    unit: 'K',\n    value: Math.pow(10, 3)\n  }];\n  units.some(pow => {\n    let formattedNum = Math.abs(num);\n    if (formattedNum >= pow.value) {\n      formattedNum /= pow.value;\n      num = Math.round(formattedNum * 10) / 10;\n      unit = pow.unit;\n      return true;\n    }\n    return false;\n  });\n  return num + unit;\n};\nexport { convertToRemString as a, convertToAbbreviationString as c };","map":{"version":3,"names":["convertToRemString","value","valueRem","convertToAbbreviationString","num","isNaN","undefined","unit","units","Math","pow","some","formattedNum","abs","round"],"sources":["D:\\pci_project_new\\node_modules\\@siemens\\ix\\components\\src\\components\\utils\\rwd.util.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport const convertToRemString = (value: number) => {\n  const valueRem = value / 16;\n  return `${valueRem}rem`;\n};\n\nexport const convertToAbbreviationString = (num: number) => {\n  if (isNaN(num) || num === null || num === undefined) {\n    return '';\n  }\n\n  let unit = '';\n\n  // Metric Units\n  const units = [\n    { unit: 'q', value: Math.pow(10, 15) },\n    { unit: 't', value: Math.pow(10, 12) },\n    { unit: 'B', value: Math.pow(10, 9) },\n    { unit: 'M', value: Math.pow(10, 6) },\n    { unit: 'K', value: Math.pow(10, 3) },\n  ];\n\n  units.some((pow) => {\n    let formattedNum = Math.abs(num);\n    if (formattedNum >= pow.value) {\n      formattedNum /= pow.value;\n      num = Math.round(formattedNum * 10) / 10;\n      unit = pow.unit;\n      return true;\n    }\n\n    return false;\n  });\n\n  return num + unit;\n};\n"],"mappings":"AAAA;;;;;;;;MASaA,kBAAkB,GAAIC,KAAa;EAC9C,MAAMC,QAAQ,GAAGD,KAAK,GAAG,EAAE;EAC3B,OAAO,GAAGC,QAAQ,KAAK;AACzB;MAEaC,2BAA2B,GAAIC,GAAW;EACrD,IAAIC,KAAK,CAACD,GAAG,CAAC,IAAIA,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKE,SAAS,EAAE;IACnD,OAAO,EAAE;;EAGX,IAAIC,IAAI,GAAG,EAAE;;EAGb,MAAMC,KAAK,GAAG,CACZ;IAAED,IAAI,EAAE,GAAG;IAAEN,KAAK,EAAEQ,IAAI,CAACC,GAAG,CAAC,EAAE,EAAE,EAAE;EAAC,CAAE,EACtC;IAAEH,IAAI,EAAE,GAAG;IAAEN,KAAK,EAAEQ,IAAI,CAACC,GAAG,CAAC,EAAE,EAAE,EAAE;EAAC,CAAE,EACtC;IAAEH,IAAI,EAAE,GAAG;IAAEN,KAAK,EAAEQ,IAAI,CAACC,GAAG,CAAC,EAAE,EAAE,CAAC;EAAC,CAAE,EACrC;IAAEH,IAAI,EAAE,GAAG;IAAEN,KAAK,EAAEQ,IAAI,CAACC,GAAG,CAAC,EAAE,EAAE,CAAC;EAAC,CAAE,EACrC;IAAEH,IAAI,EAAE,GAAG;IAAEN,KAAK,EAAEQ,IAAI,CAACC,GAAG,CAAC,EAAE,EAAE,CAAC;EAAC,CAAE,CACtC;EAEDF,KAAK,CAACG,IAAI,CAAED,GAAG;IACb,IAAIE,YAAY,GAAGH,IAAI,CAACI,GAAG,CAACT,GAAG,CAAC;IAChC,IAAIQ,YAAY,IAAIF,GAAG,CAACT,KAAK,EAAE;MAC7BW,YAAY,IAAIF,GAAG,CAACT,KAAK;MACzBG,GAAG,GAAGK,IAAI,CAACK,KAAK,CAACF,YAAY,GAAG,EAAE,CAAC,GAAG,EAAE;MACxCL,IAAI,GAAGG,GAAG,CAACH,IAAI;MACf,OAAO,IAAI;;IAGb,OAAO,KAAK;GACb,CAAC;EAEF,OAAOH,GAAG,GAAGG,IAAI;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}