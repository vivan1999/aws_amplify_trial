{"ast":null,"code":"import { T as TypedEvent } from './typed-event.js';\n\n/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * A function which creates a Context value object\n */\nfunction createContext(name, initialValue) {\n  return {\n    name,\n    initialValue\n  };\n}\n/**\n * An event fired by a context requester to signal it desires a named context.\n *\n * A provider should inspect the `context` property of the event to determine if it has a value that can\n * satisfy the request, calling the `callback` with the requested value if so.\n *\n * If the requested context event contains a truthy `subscribe` value, then a provider can call the callback\n * multiple times if the value is changed, if this is the case the provider should pass an `unsubscribe`\n * function to the callback which requesters can invoke to indicate they no longer wish to receive these updates.\n */\nclass ContextEvent extends Event {\n  constructor(context, callback, subscribe) {\n    super('context-request', {\n      bubbles: true,\n      composed: true\n    });\n    this.context = context;\n    this.callback = callback;\n    this.subscribe = subscribe;\n  }\n}\nfunction useContextConsumer(hostElement, context, onContextReceived, subscribe) {\n  let _unsubscribe;\n  hostElement.dispatchEvent(new ContextEvent(context, (ctx, unSub) => {\n    onContextReceived(ctx, unSub);\n    _unsubscribe = unSub;\n  }, subscribe));\n  return {\n    unsubscribe: () => {\n      _unsubscribe();\n    }\n  };\n}\nfunction useContextProvider(hostElement, context, contextPayload) {\n  const requestContext = new TypedEvent();\n  const updateContext = new TypedEvent();\n  const requests = new Set();\n  hostElement.addEventListener('context-request', requestContextEvent => {\n    if ((requestContextEvent === null || requestContextEvent === void 0 ? void 0 : requestContextEvent.context.name) !== context.name) {\n      return;\n    }\n    requestContextEvent.stopPropagation();\n    if (requestContextEvent.subscribe) {\n      requests.add(requestContextEvent);\n    }\n    requestContext.emit(requestContextEvent);\n    if (contextPayload) {\n      requestContextEvent.callback(contextPayload, () => {\n        requests.delete(requestContextEvent);\n      });\n    }\n  });\n  updateContext.on(context => {\n    requests.forEach(r => r.callback(context, () => {\n      requests.delete(r);\n    }));\n  });\n  return {\n    emit: context => {\n      updateContext.emit(context);\n    }\n  };\n}\n\n/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst closestIxMenu = element => {\n  const menuElement = element.closest('ix-menu');\n  return menuElement;\n};\nconst ApplicationLayoutContext = createContext('application-layout-context', {\n  hideHeader: false,\n  host: null,\n  sidebar: false\n});\nexport { ApplicationLayoutContext as A, useContextConsumer as a, closestIxMenu as c, useContextProvider as u };","map":{"version":3,"names":["createContext","name","initialValue","ContextEvent","Event","constructor","context","callback","subscribe","bubbles","composed","useContextConsumer","hostElement","onContextReceived","_unsubscribe","dispatchEvent","ctx","unSub","unsubscribe","useContextProvider","contextPayload","requestContext","TypedEvent","updateContext","requests","Set","addEventListener","requestContextEvent","stopPropagation","add","emit","delete","on","forEach","r","closestIxMenu","element","menuElement","closest","ApplicationLayoutContext","hideHeader","host","sidebar"],"sources":["D:\\pci_project_new\\node_modules\\@siemens\\ix\\components\\src\\components\\utils\\context.ts","D:\\pci_project_new\\node_modules\\@siemens\\ix\\components\\src\\components\\utils\\application-layout\\context.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { TypedEvent } from './typed-event';\n\n/**\n * A Context object defines an optional initial value for a Context, as well as a name identifier for debugging purposes.\n */\nexport type Context<T> = {\n  name: string;\n  initialValue?: T;\n};\n\n/**\n * An unknown context type\n */\nexport type UnknownContext = Context<unknown>;\n\n/**\n * A helper type which can extract a Context value type from a Context type\n */\nexport type ContextType<T extends UnknownContext> = T extends Context<infer Y>\n  ? Y\n  : never;\n\n/**\n * A function which creates a Context value object\n */\nexport function createContext<T>(\n  name: string,\n  initialValue?: T\n): Readonly<Context<T>> {\n  return {\n    name,\n    initialValue,\n  };\n}\n\n/**\n * A callback which is provided by a context requester and is called with the value satisfying the request.\n * This callback can be called multiple times by context providers as the requested value is changed.\n */\nexport type ContextCallback<ValueType> = (\n  value: ValueType,\n  unsubscribe?: () => void\n) => void;\n\n/**\n * An event fired by a context requester to signal it desires a named context.\n *\n * A provider should inspect the `context` property of the event to determine if it has a value that can\n * satisfy the request, calling the `callback` with the requested value if so.\n *\n * If the requested context event contains a truthy `subscribe` value, then a provider can call the callback\n * multiple times if the value is changed, if this is the case the provider should pass an `unsubscribe`\n * function to the callback which requesters can invoke to indicate they no longer wish to receive these updates.\n */\nexport class ContextEvent<T extends UnknownContext> extends Event {\n  public constructor(\n    public readonly context: T,\n    public readonly callback: ContextCallback<ContextType<T>>,\n    public readonly subscribe?: boolean\n  ) {\n    super('context-request', { bubbles: true, composed: true });\n  }\n}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    /**\n     * A 'context-request' event can be emitted by any element which desires\n     * a context value to be injected by an external provider.\n     */\n    'context-request': ContextEvent<UnknownContext>;\n  }\n}\n\nexport type ContextConsumerSubscription = {\n  unsubscribe: () => void;\n};\n\nexport function useContextConsumer<\n  T extends HTMLElement,\n  C extends UnknownContext\n>(\n  hostElement: T,\n  context: C,\n  onContextReceived: (\n    context: ContextType<C>,\n    unsubscribe?: () => void\n  ) => void,\n  subscribe?: boolean\n): ContextConsumerSubscription {\n  let _unsubscribe: () => void;\n  hostElement.dispatchEvent(\n    new ContextEvent(\n      context,\n      (ctx, unSub) => {\n        onContextReceived(ctx, unSub);\n        _unsubscribe = unSub;\n      },\n      subscribe\n    )\n  );\n\n  return {\n    unsubscribe: () => {\n      _unsubscribe();\n    },\n  };\n}\nexport type ContextProvider<C extends Context<{}> = Context<unknown>> = {\n  emit: (context: ContextType<C>) => void;\n};\n\nexport function useContextProvider<\n  X extends {},\n  C extends Context<X>,\n  T extends HTMLElement = HTMLElement\n>(\n  hostElement: T,\n  context: C,\n  contextPayload?: ContextType<C>\n): ContextProvider<C> {\n  const requestContext = new TypedEvent<ContextEvent<C>>();\n  const updateContext = new TypedEvent<ContextType<C>>();\n\n  const requests = new Set<ContextEvent<UnknownContext>>();\n\n  hostElement.addEventListener(\n    'context-request',\n    (requestContextEvent: ContextEvent<C>) => {\n      if (requestContextEvent?.context.name !== context.name) {\n        return;\n      }\n\n      requestContextEvent.stopPropagation();\n\n      if (requestContextEvent.subscribe) {\n        requests.add(requestContextEvent);\n      }\n      requestContext.emit(requestContextEvent);\n\n      if (contextPayload) {\n        requestContextEvent.callback(contextPayload, () => {\n          requests.delete(requestContextEvent);\n        });\n      }\n    }\n  );\n\n  updateContext.on((context: ContextType<C>) => {\n    requests.forEach((r) =>\n      r.callback(context, () => {\n        requests.delete(r);\n      })\n    );\n  });\n\n  return {\n    emit: (context: ContextType<C>) => {\n      updateContext.emit(context);\n    },\n  };\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { createContext } from '../context';\n\nexport const closestIxMenu = (element: Element) => {\n  const menuElement = element.closest('ix-menu');\n  return menuElement;\n};\n\nexport const ApplicationLayoutContext = createContext<{\n  hideHeader: boolean;\n  host: 'basic-navigation' | 'map-navigation' | null;\n  sidebar?: boolean;\n}>('application-layout-context', {\n  hideHeader: false,\n  host: null,\n  sidebar: false,\n});\n"],"mappings":";;AAAA;;;;;;;;AA+BA;;;SAGgBA,aAAaA,CAC3BC,IAAY,EACZC,YAAgB;EAEhB,OAAO;IACLD,IAAI;IACJC;GACD;AACH;AAWA;;;;;;;;;;MAUaC,YAAuC,SAAQC,KAAK;EAC/DC,YACkBC,OAAU,EACVC,QAAyC,EACzCC,SAAmB;IAEnC,KAAK,CAAC,iBAAiB,EAAE;MAAEC,OAAO,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAI,CAAE,CAAC;IAJ3C,KAAAJ,OAAO,GAAPA,OAAO;IACP,KAAAC,QAAQ,GAARA,QAAQ;IACR,KAAAC,SAAS,GAATA,SAAS;;;SAoBbG,kBAAkBA,CAIhCC,WAAc,EACdN,OAAU,EACVO,iBAGS,EACTL,SAAmB;EAEnB,IAAIM,YAAwB;EAC5BF,WAAW,CAACG,aAAa,CACvB,IAAIZ,YAAY,CACdG,OAAO,EACP,CAACU,GAAG,EAAEC,KAAK;IACTJ,iBAAiB,CAACG,GAAG,EAAEC,KAAK,CAAC;IAC7BH,YAAY,GAAGG,KAAK;GACrB,EACDT,SAAS,CACV,CACF;EAED,OAAO;IACLU,WAAW,EAAEA,CAAA;MACXJ,YAAY,EAAE;;GAEjB;AACH;SAKgBK,kBAAkBA,CAKhCP,WAAc,EACdN,OAAU,EACVc,cAA+B;EAE/B,MAAMC,cAAc,GAAG,IAAIC,UAAU,EAAmB;EACxD,MAAMC,aAAa,GAAG,IAAID,UAAU,EAAkB;EAEtD,MAAME,QAAQ,GAAG,IAAIC,GAAG,EAAgC;EAExDb,WAAW,CAACc,gBAAgB,CAC1B,iBAAiB,EAChBC,mBAAoC;IACnC,IAAI,CAAAA,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAErB,OAAO,CAACL,IAAI,MAAKK,OAAO,CAACL,IAAI,EAAE;MACtD;;IAGF0B,mBAAmB,CAACC,eAAe,EAAE;IAErC,IAAID,mBAAmB,CAACnB,SAAS,EAAE;MACjCgB,QAAQ,CAACK,GAAG,CAACF,mBAAmB,CAAC;;IAEnCN,cAAc,CAACS,IAAI,CAACH,mBAAmB,CAAC;IAExC,IAAIP,cAAc,EAAE;MAClBO,mBAAmB,CAACpB,QAAQ,CAACa,cAAc,EAAE;QAC3CI,QAAQ,CAACO,MAAM,CAACJ,mBAAmB,CAAC;OACrC,CAAC;;GAEL,CACF;EAEDJ,aAAa,CAACS,EAAE,CAAE1B,OAAuB;IACvCkB,QAAQ,CAACS,OAAO,CAAEC,CAAC,IACjBA,CAAC,CAAC3B,QAAQ,CAACD,OAAO,EAAE;MAClBkB,QAAQ,CAACO,MAAM,CAACG,CAAC,CAAC;KACnB,CAAC,CACH;GACF,CAAC;EAEF,OAAO;IACLJ,IAAI,EAAGxB,OAAuB;MAC5BiB,aAAa,CAACO,IAAI,CAACxB,OAAO,CAAC;;GAE9B;AACH;;AC1KA;;;;;;;;MAWa6B,aAAa,GAAIC,OAAgB;EAC5C,MAAMC,WAAW,GAAGD,OAAO,CAACE,OAAO,CAAC,SAAS,CAAC;EAC9C,OAAOD,WAAW;AACpB;MAEaE,wBAAwB,GAAGvC,aAAa,CAIlD,4BAA4B,EAAE;EAC/BwC,UAAU,EAAE,KAAK;EACjBC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE;CACV"},"metadata":{},"sourceType":"module","externalDependencies":[]}