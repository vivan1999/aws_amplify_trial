{"ast":null,"code":"/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nfunction getSlottedElements(slot) {\n  return slot.assignedElements({\n    flatten: true\n  });\n}\nfunction hasSlottedElements(slot) {\n  if (!slot) {\n    return false;\n  }\n  return slot.assignedElements({\n    flatten: true\n  }).length !== 0;\n}\nexport { getSlottedElements as g, hasSlottedElements as h };","map":{"version":3,"names":["getSlottedElements","slot","assignedElements","flatten","hasSlottedElements","length"],"sources":["D:\\pci_project_new\\node_modules\\@siemens\\ix\\components\\src\\components\\utils\\shadow-dom.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport function closestElement(selector: string, el: any) {\n  if (!el) {\n    return null;\n  }\n  return (\n    el.closest(selector) ||\n    closestElement(selector, (el.getRootNode() as any).host)\n  );\n}\n\nexport function getSlottedElements<R = any>(slot: any): R[] {\n  return slot.assignedElements({ flatten: true });\n}\n\nexport function hasSlottedElements(slot: any) {\n  if (!slot) {\n    return false;\n  }\n  return slot.assignedElements({ flatten: true }).length !== 0;\n}\n\nexport function containsElement(target: Element, element: Element) {\n  const hasShadowDom = target.shadowRoot;\n\n  if (hasShadowDom) {\n    target.contains(element) || target.shadowRoot.contains(element);\n  }\n\n  return target.contains(element);\n}\n"],"mappings":"AAAA;;;;;;;;SAkBgBA,kBAAkBA,CAAUC,IAAS;EACnD,OAAOA,IAAI,CAACC,gBAAgB,CAAC;IAAEC,OAAO,EAAE;EAAI,CAAE,CAAC;AACjD;SAEgBC,kBAAkBA,CAACH,IAAS;EAC1C,IAAI,CAACA,IAAI,EAAE;IACT,OAAO,KAAK;;EAEd,OAAOA,IAAI,CAACC,gBAAgB,CAAC;IAAEC,OAAO,EAAE;EAAI,CAAE,CAAC,CAACE,MAAM,KAAK,CAAC;AAC9D"},"metadata":{},"sourceType":"module","externalDependencies":[]}